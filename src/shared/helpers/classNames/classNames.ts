// Record специальный тайпскриптовый тип, который обозначает, что в качестве ключа будет string,
// а в качестве значение булевый флаг либо строка. Выглядит это так
// const obj: Mods = {
//    'hovered': false
//  }
type Mods = Record<string, boolean>

// первым принимает главный класс (cls), вторым принимает объект с модами, объект у которого ключ название класса, а значение булевый флаг
// третим идет массив с дополнительными классами, классы которые не зависят от условий, просто идут как дополнительные
//                                                                                      |
// функция должна возвращать из аргументов строку классов
export function classNames(cls: string, mods: Mods, additional: Array<string | undefined> = []): string {
    // Реализация. Возвращаем массив который склеиваем через пробел с помощью функции join.
    // Сначала добавляем cls, затем разворациваем additional (поскольку в процессе разработки в additional
    // будут прилетать undefined его лучше фильтровать по Boolean фильтру)
    // А дальше с помощью фунции entries мы можем получить у объекта как ключи так и значения,
    // по итогу нам возвращается массив который фильтруем и оставляем только те элементы у которых boolean равен true.
    // И затем по получившемуся массиву мы с помощью map итерируемся и тут нам уже интересен не value a ключ(cls)
    // и мы этот ключ возвращаем. По итогу нам нужны только ключи у объекта и эти ключи будут являться названиями классов
    return [
        cls,
        ...additional.filter(Boolean),
        ...Object.entries(mods)
            .filter(([_, value]) => Boolean(value))
            .map(([cls]) => cls)
    ]
        .join(' ')
}